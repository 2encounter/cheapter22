Index: src/main/java/org/smart4j/chapter2/helper/DatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/smart4j/chapter2/helper/DatabaseHelper.java	(date 1552742400000)
+++ src/main/java/org/smart4j/chapter2/helper/DatabaseHelper.java	(date 1552742275346)
@@ -1,43 +1,57 @@
 package org.smart4j.chapter2.helper;
 
 
+import org.apache.commons.dbcp.BasicDataSource;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.handlers.BeanHandler;
 import org.apache.commons.dbutils.handlers.BeanListHandler;
+import org.apache.commons.dbutils.handlers.MapListHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.smart4j.chapter2.util.CollectionUtil;
 import org.smart4j.chapter2.util.PropsUtil;
 
 import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.DriverManager;
 import java.sql.SQLException;
-import java.util.List;
-import java.util.Properties;
+import java.util.*;
 
 //数据库操作助手类
 public  class DatabaseHelper {
-    private static  final QueryRunner QUERY_RUNNER=new QueryRunner();
+    private static final QueryRunner QUERY_RUNNER;
 
-    private static final ThreadLocal<Connection> CONNECTION_HOLDER=new ThreadLocal<Connection>();
+    private static final ThreadLocal<Connection> CONNECTION_HOLDER;
 
+    private static final BasicDataSource DATA_SOURCE;
 
-    private static final Logger LOGGER= LoggerFactory.getLogger(DatabaseHelper.class);
-    private static final String DRIVER;
-    public static final String URL;
-    public static final String USERNAME;
-    public static final String PASSWORD;
+   private static final Logger LOGGER= LoggerFactory.getLogger(DatabaseHelper.class);
+//    private static final String DRIVER;
+//    public static final String URL;
+//    public static final String USERNAME;
+//    public static final String PASSWORD;
     static{
-        Properties propertoes= PropsUtil.loadProps("confi.properties");
-        DRIVER=propertoes.getProperty("jdbc.driver");
-        URL=propertoes.getProperty("jdbc.url");
-        USERNAME=propertoes.getProperty("jdbc.username");
-        PASSWORD=propertoes.getProperty("jdbc.password");
-        try {
-            Class.forName(DRIVER);
-        }catch (ClassNotFoundException e){
-            LOGGER.error("can not load jdbc driver",e);
-        }
+        CONNECTION_HOLDER=new ThreadLocal<Connection>();
+        QUERY_RUNNER=new QueryRunner();
+        Properties propertoes= PropsUtil.loadProps("config.properties");
+        String driver=propertoes.getProperty("jdbc.driver");
+        String url=propertoes.getProperty("jdbc.url");
+        String username=propertoes.getProperty("jdbc.username");
+        String password=propertoes.getProperty("jdbc.password");
+
+        DATA_SOURCE=new BasicDataSource();
+        DATA_SOURCE.setDriverClassName(driver);
+        DATA_SOURCE.setUrl(url);
+        DATA_SOURCE.setUsername(username);
+        DATA_SOURCE.setPassword(password);
+
+//        DRIVER=propertoes.getProperty("jdbc.driver");
+//        URL=propertoes.getProperty("jdbc.url");
+//        USERNAME=propertoes.getProperty("jdbc.username");
+//        PASSWORD=propertoes.getProperty("jdbc.password");
+       // try {
+            //Class.forName(DRIVER);
+     //   }catch (ClassNotFoundException e){
+          //  LOGGER.error("can not load jdbc driver",e);
+      //  }
     }
     //获取数据库连接
     public static Connection getConnection(){
@@ -45,20 +59,21 @@
         Connection connection=CONNECTION_HOLDER.get();//<1>
         if(connection==null){
             try {
-                connection=DriverManager.getConnection(URL,USERNAME,PASSWORD);
+                //connection=DriverManager.getConnection(URL,USERNAME,PASSWORD);
+                connection=DATA_SOURCE.getConnection();
             }catch (SQLException e){
                 LOGGER.error("get connection failure",e);
                 throw new RuntimeException(e);
             }finally {
                 CONNECTION_HOLDER.set(connection);//<2>
             }
-        }
+        }  return connection;
 //        try {
 //            connection= DriverManager.getConnection(URL,USERNAME,PASSWORD);
 //        }catch (SQLException e){
 //            LOGGER.error("get connect failure",e);
 //        }
-        return connection;
+
     }//关闭数据库
     //public static void closeConnection(Connection connection){
     public static void closeConnection(){
@@ -80,7 +95,6 @@
         Connection connection=getConnection();
         try {
             entityList=QUERY_RUNNER.query(connection,sql,new BeanListHandler<T>(entityClass),params);
-
         }catch (SQLException e){
             LOGGER.error("query entity list failure",e);
             throw new RuntimeException(e);
@@ -91,7 +105,7 @@
     }
 
     //查询实体
-    public static <T> T queryENtity(Class<T>entityClass,String sql,Object...params){
+    public static <T> T queryEntity(Class<T>entityClass,String sql,Object...params){
         T entity;
         try {
             Connection connection=getConnection();
@@ -104,5 +118,78 @@
         }
         return entity;
     }
+    //执行查询语句
+    public static List<Map<String,Object>>executeQuery(String sql, Object...params){
+        List<Map<String,Object>>result;
+        try {
+            Connection connection=getConnection();
+            result=QUERY_RUNNER.query(connection,sql,new MapListHandler(),params);
+        }catch (Exception e){
+            LOGGER.error("execute query failure",e);
+            throw new RuntimeException(e);
+        }
+        return result;
+    }
+//执行更新语句（包括update、insert、delete）
+    public static int executeUpdate(String sql,Object...params){
+        int rows=0;
+        try {
+            Connection connection=getConnection();
+            rows=QUERY_RUNNER.update(connection,sql,params);
+        }catch (SQLException e){
+            LOGGER.error("execute update failure",e);
+            throw new RuntimeException(e);
+        }finally {
+            closeConnection();
+        }
+        return  rows;
+    }
+    //插入实体
+    public static <T> boolean insertEntity(Class<T> entityClass,Map<String,Object>fileMap){
+        if(CollectionUtil.isEmpty(fileMap)){
+            LOGGER.error(("can not insert entity:filedMap is empty"));
+            return false;
+        }
+        String sql="INSERT INTO"+getTableName(entityClass);
+        StringBuilder columns=new StringBuilder("(");
+        StringBuilder values=new StringBuilder("(");
+        for(String fieldName:fileMap.keySet()){
+            columns.append(fieldName).append(",");
+            values.append("?,");
+        }
+        columns.replace(columns.lastIndexOf(","),columns.length(),")");
+        values.replace(values.lastIndexOf(","),values.length(),")");
+        sql+=columns+"VALUES"+values;
+        Object[] params=fileMap.values().toArray();
+        return executeUpdate(sql,params)==1;
+    }
+    //更新实体
+    public static <T>boolean updateEntity(Class<T> entityClass,long id,Map<String,Object>fieldMap){
+        if (CollectionUtil.isEmpty(fieldMap)){
+            LOGGER.error("can not update entity:fieldMap is empty");
+            return false;
+        }
+
+        String sql="UPDATE"+getTableName((entityClass))+"SET";
+        StringBuilder columns=new StringBuilder();
+        for(String fieldName:fieldMap.keySet()){
+            columns.append(fieldName).append("=?, ");
+        }
+        sql+=columns.substring(0,columns.lastIndexOf(","))+"WHERE id=?";
+
+        List<Object> paramList=new ArrayList<Object>();
+        paramList.addAll(fieldMap.values());
+        Object[] params=paramList.toArray();
+
+        return executeUpdate(sql,params)==1;
+    }
+    //删除实体
+    public static<T>boolean deleteEntity(Class<T> entityClass,long id){
+        String sql="DELETE FROM"+getTableName(entityClass)+"WHERE id=?";
+        return executeUpdate(sql,id)==1;
+    }
+    private static String getTableName(Class<?> entityClass){
+        return entityClass.getSimpleName();
+    }
 
 }
Index: src/main/java/org/smart4j/chapter2/service/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/smart4j/chapter2/service/CustomerService.java	(date 1552742400000)
+++ src/main/java/org/smart4j/chapter2/service/CustomerService.java	(date 1552738550603)
@@ -1,4 +1,5 @@
 package org.smart4j.chapter2.service;
+import javafx.scene.chart.PieChart;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.smart4j.chapter2.helper.DatabaseHelper;
@@ -74,15 +75,16 @@
 
     //创建客户
     public boolean createCustomer(Map<String, Object> fieldMap) {
-        return false;
+
+        return DatabaseHelper.insertEntity(Customer.class,fieldMap);
     }
 
     //更新客户
     public boolean updateCustomer(long id, Map<String, Object> fieldMap) {
-        return false;
+        return DatabaseHelper.updateEntity(Customer.class,id,fieldMap);
     }
 
     public boolean deleteCustomer(long id) {
-        return false;
+        return DatabaseHelper.deleteEntity(Customer.class,id);
     }
 }
